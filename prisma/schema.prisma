datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model MapRecord {
  id         String            @id @default(cuid())
  continents ContinentRecord[]
  name       String            @unique

  GameRecord GameRecord[]
  @@map(name: "maps")
}

model ContinentRecord {
  id          String            @id @default(cuid())
  name        String
  displayName String
  bonusValue  Int
  territories TerritoryRecord[]
  mapId       String
  map         MapRecord         @relation(fields: [mapId], references: [id])

  @@map(name: "continents")
}

model TerritoryRecord {
  id                      String                  @id @default(cuid())
  name                    String
  displayText             String
  value                   Int
  continentId             String
  continent               ContinentRecord         @relation(fields: [continentId], references: [id])
  territoryDestinations   TerritoryBridgeRecord[] @relation("territory_primary")
  territoryAccessibleFrom TerritoryBridgeRecord[] @relation("territory_destination")
  pathDef                 String
  textBoxX                Decimal
  textBoxY                Decimal
  textBoxWidth            Decimal
  textBoxHeight           Decimal

  territoryStates         GameTerritoryStateRecord[] @relation("territory_for_state")
  territorySelectedEvents GameEventRecord[]          @relation("territory_selected_events")
  territoryEventDetails   GameEventDetailRecord[]    @relation("territory_game_event_details")

  @@map(name: "territories")
}

model TerritoryBridgeRecord {
  id                   String          @id @default(cuid())
  primaryTerritoryId   String
  secondaryTerritoryId String
  territoryPrimary     TerritoryRecord @relation("territory_primary", fields: [primaryTerritoryId], references: [id])
  territoryDestination TerritoryRecord @relation("territory_destination", fields: [secondaryTerritoryId], references: [id])

  @@map(name: "territory_bridges")
}

model GameRecord {
  id        String  @id @default(cuid())
  player1Id String
  player1   User    @relation("game_player_1", fields: [player1Id], references: [id])
  player2Id String
  player2   User    @relation("game_player_2", fields: [player2Id], references: [id])
  winnerId  String?
  winner    User?   @relation("game_winner", fields: [winnerId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  currentTurnPlayerId String?
  currentTurnPlayer   User?   @relation("game_current_turn", fields: [currentTurnPlayerId], references: [id])

  map   MapRecord @relation(fields: [mapId], references: [id])
  mapId String

  currentTurn     Int    @default(0)
  currentTurnStep String @default("InvalidValue")

  territoryStates GameTerritoryStateRecord[] @relation("gamme_territory_state")

  gameEvents GameEventRecord[] @relation("gamme_event")


  @@map(name: "games")
}

model GameEventRecord {
  id String @id @default(cuid())

  gameId String
  game   GameRecord @relation("gamme_event", fields: [gameId], references: [id])

  roundCounter             Int
  roundStep                String
  humanReadableDescription String
  createdAt                DateTime @default(now()) @map(name: "created_at")

  playerForEventId String
  playerForEvent   User   @relation("player_driver_events", fields: [playerForEventId], references: [id])


  postEventPlayerId String
  postEventPlayer   User   @relation("player_preturn_events", fields: [postEventPlayerId], references: [id])

  newRoundStep String

  newSelectedTerritoryId String?
  newSelectedTerritory   TerritoryRecord? @relation("territory_selected_events", fields: [newSelectedTerritoryId], references: [id])

  details GameEventDetailRecord[] @relation("game_event_details")

  @@map(name: "game_events")
}

model GameEventDetailRecord {
  id            String @id @default(cuid())
  territoryType String

  gameEventId String
  gameEvent   GameEventRecord @relation("game_event_details", fields: [gameEventId], references: [id])

  territoryId String
  territory   TerritoryRecord @relation("territory_game_event_details", fields: [territoryId], references: [id])

  armiesPostEvent Int

  territoryPostEventOwnerId String
  territoryPostEventOwner   User   @relation("player_ownership_post_event_detail", fields: [territoryPostEventOwnerId], references: [id])

  @@map(name: "game_event_details")
}

model GameTerritoryStateRecord {
  id          String          @id @default(cuid())
  ownerId     String
  owner       User            @relation("territory_owner", fields: [ownerId], references: [id])
  territoryId String
  territory   TerritoryRecord @relation("territory_for_state", fields: [territoryId], references: [id])
  gameId      String
  game        GameRecord      @relation("gamme_territory_state", fields: [gameId], references: [id])
  armies      Int

  @@map(name: "game_territory_states")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  displayName   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  gamesStarted            GameRecord[] @relation("game_player_1")
  gamesJoined             GameRecord[] @relation("game_player_2")
  gamesWon                GameRecord[] @relation("game_winner")
  gamesCurrentlyWaitingOn GameRecord[] @relation("game_current_turn")

  territoryStates GameTerritoryStateRecord[] @relation("territory_owner")

  drivenGameEvents  GameEventRecord[] @relation("player_driver_events")
  preTurnGameEvents GameEventRecord[] @relation("player_preturn_events")

  postEventOwnershipEventDetail GameEventDetailRecord[] @relation("player_ownership_post_event_detail")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
